group "ai.djl.pytorch"

boolean isCentOS = project.hasProperty("centos")
dependencies {
    api project(":api")

    testImplementation("org.testng:testng:${testng_version}") {
        exclude group: "junit", module: "junit"
    }

    testImplementation "org.slf4j:slf4j-simple:${slf4j_version}"
}

processResources {
    doLast {
        def url = "https://djl-ai.s3.amazonaws.com/publish/pytorch-${pytorch_version}/jnilib"
        def files = ["linux-cpu": ["pytorch.properties", "libdjl_torch.so"],
                     "win-cu92" : ["pytorch.properties", "djl_torch.dll"],
                     "win-cu101" : ["pytorch.properties", "djl_torch.dll"],
                     "win-cu102" : ["pytorch.properties", "djl_torch.dll"],
                     "linux-cu92" : ["pytorch.properties", "libdjl_torch.so"],
                     "linux-cu101" : ["pytorch.properties", "libdjl_torch.so"],
                     "linux-cu102" : ["pytorch.properties", "libdjl_torch.so"],
                     "osx-cpu"  : ["pytorch.properties", "libdjl_torch.dylib"],
                     "win-cpu"  : ["pytorch.properties", "djl_torch.dll"],
        ]
        if (isCentOS) {
            url = url + "/centos"
            files = [
                    "linux-cpu": ["pytorch.properties", "libdjl_torch.so"],
                    "linux-cu92" : ["pytorch.properties", "libdjl_torch.so"],
                    "linux-cu101" : ["pytorch.properties", "libdjl_torch.so"],
                    "linux-cu102" : ["pytorch.properties", "libdjl_torch.so"],
            ]
        }
        def classesDir = "${project.buildDir}/jnilib"
        files.each { entry ->
            def nameList = entry.key.split("-")
            def flavor = nameList[1]
            def classifier = "${nameList[0]}-x86_64"
            entry.value.each { name ->
                def downloadPath = new URL("${url}/${classifier}/${flavor}/${name}")
                def file = file("${classesDir}/${classifier}/${flavor}/${name}")
                if (!file.exists()) {
                    project.logger.lifecycle("${url}/${classifier}/${flavor}/${name}")
                    file.getParentFile().mkdirs()
                    downloadPath.withInputStream { i -> file.withOutputStream { it << i } }
                }
            }
        }

        copy {
            from classesDir
            into "${project.buildDir}/classes/java/main/jnilib"
        }
    }
}


test {
    environment "PATH", "src/test/bin:${environment.PATH}"
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId "pytorch-engine" + (isCentOS ? "-precxx11" : "")
            pom {
                name = "DJL Engine Adapter for PyTorch"
                description = "Deep Java Library (DJL) Engine Adapter for PyTorch"
                url = "http://www.djl.ai/pytorch/${project.name}"
            }
        }
    }
}
