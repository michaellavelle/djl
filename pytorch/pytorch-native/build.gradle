plugins {
    id 'maven-publish'
    id 'signing'
}

group = "ai.djl.pytorch"
apply from: file("${rootProject.projectDir}/tools/gradle/cpp-formatter.gradle")

def VERSION = "1.5.0"
boolean isRelease = project.hasProperty("release") || project.hasProperty("staging")
boolean isCentOS = project.hasProperty("centos")
// fixme: reomve isCentOS when new version comes
version = VERSION + (isCentOS ? "-post0" : "") + (isRelease ? "" : "-SNAPSHOT")
def BINARY_ROOT = "${project.buildDir}/download"

def downloadBuild(String os, String flavor, Boolean isCentOs = false) {
    exec {
        if (os == "win") {
            commandLine "${project.projectDir}/build.cmd", "${flavor}"
        } else {
            if (isCentOs) {
                commandLine 'bash', 'build.sh', "${flavor}", "centos"
            } else {
                commandLine 'bash', 'build.sh', "${flavor}"
            }
        }
    }
    def engineDir = "${project.parent.projectDir}/pytorch-engine"
    def classifier = "${os}-x86_64"
    def publishDir = "${engineDir}/build/jnilib/${classifier}/${flavor}"
    copy {
        def tree = fileTree(project.buildDir)
        tree.include("**/libdjl_torch.*", "**/djl_torch.dll")
        from tree.files
        into publishDir
    }
    def versionName = String.format("${project.parent.version}-%s", new Date().format('yyyyMMdd'))
    def propFile = file("${publishDir}/pytorch.properties")
    propFile.text = "version=${versionName}\n"
    // for nightly ci
    def ciDir = "${project.projectDir}/jnilib/${classifier}/${flavor}"
    copy {
        from publishDir
        into ciDir
    }
}

def downloadBuildAndroid() {
    def LIST_ABI = ["armeabi-v7a", "arm64-v8a", "x86", "x86_64"]
    LIST_ABI.each {
        abi ->
            exec {
                commandLine 'bash', 'build_android.sh', "${abi}"
            }
            def ciDir = "${project.projectDir}/jnilib/android/${abi}"
            copy {
                from "${project.buildDir}/libdjl_torch.so"
                into ciDir
            }
            def versionName = String.format("${project.parent.version}-%s", new Date().format('yyyyMMdd'))
            def propFile = file("${ciDir}/pytorch.properties")
            propFile.text = "version=${versionName}\n"
            cleanBuild()
    }
}

def cleanBuild() {
    delete "${project.projectDir}/build"
    delete "${project.projectDir}/libtorch"
    delete "${project.projectDir}/libtorch_android"
}

task compileAndroidJNI {
    doFirst {
        downloadBuildAndroid()
    }
}

task releaseJNI {
    doFirst {
        // You have to use an environment with CUDA persets for Linux and Windows
        if (System.properties['os.name'].toLowerCase(Locale.ROOT).contains("windows")) {
            downloadBuild("win", "cpu")
            cleanBuild()
            downloadBuild("win", "cu92")
            cleanBuild()
            downloadBuild("win", "cu101")
            cleanBuild()
            downloadBuild("win", "cu102")
            cleanBuild()
        } else if (System.properties['os.name'].toLowerCase(Locale.ROOT).contains("mac")) {
            downloadBuild("osx", "cpu")
            cleanBuild()
        } else if (System.properties['os.name'].toLowerCase(Locale.ROOT).contains("linux")) {
            downloadBuild("linux", "cpu", isCentOS)
            cleanBuild()
            downloadBuild("linux", "cu92", isCentOS)
            cleanBuild()
            downloadBuild("linux", "cu101", isCentOS)
            cleanBuild()
            downloadBuild("linux", "cu102", isCentOS)
            cleanBuild()
        } else {
            throw new IllegalStateException("Unknown Architecture " + System.properties['os.name'])
        }
    }
}

task compileJNI {
    doFirst {
        if (System.properties['os.name'].toLowerCase(Locale.ROOT).contains("windows")) {
            downloadBuild("win", "cpu")
        } else if (System.properties['os.name'].toLowerCase(Locale.ROOT).contains("mac")) {
            downloadBuild("osx", "cpu")
        } else if (System.properties['os.name'].toLowerCase(Locale.ROOT).contains("linux")) {
            downloadBuild("linux", "cpu")
        } else {
            throw new IllegalStateException("Unknown Architecture " + System.properties['os.name'])
        }
    }
}

task compileJNIGPU {
    doFirst {
        if (System.properties['os.name'].toLowerCase(Locale.ROOT).contains("windows")) {
            downloadBuild("win", "cu102")
        } else if (System.properties['os.name'].toLowerCase(Locale.ROOT).contains("linux")) {
            downloadBuild("linux", "cu102")
        } else {
            throw new IllegalStateException("Architecture not supported: " + System.properties['os.name'])
        }
    }
}

// Create a placeholder jar without classifier to pass sonatype tests but throws an Exception if loaded
jar {
    def placeholder = "${project.buildDir}/placeholder"
    doFirst {
        def versionName = project.version
        if (!isRelease) {
            version += String.format("-%s", new Date().format('yyyyMMdd'))
        }
        def dir = file("${placeholder}/native/lib")
        dir.mkdirs()
        def propFile = file("${placeholder}/native/lib/pytorch.properties")
        propFile.text = "placeholder=true\nversion=${versionName}\n"
    }

    from placeholder
}

java {
    withJavadocJar()
    withSourcesJar()
}

project.tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

signing {
    required(project.hasProperty("staging") || project.hasProperty("snapshot"))
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications
}

publishing.repositories {
    maven {
        if (project.hasProperty("snapshot")) {
            name = "snapshot"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
            credentials {
                username = findProperty("ossrhUsername")
                password = findProperty("ossrhPassword")
            }
        } else if (project.hasProperty("staging")) {
            name = "staging"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = findProperty("ossrhUsername")
                password = findProperty("ossrhPassword")
            }
        } else {
            name = "local"
            url = "build/repo"
        }
    }
}

task downloadPyTorchNativeLib() {
    doLast {
        def url = "https://download.pytorch.org/libtorch"
        def files = [
                "cpu/libtorch-cxx11-abi-shared-with-deps-${VERSION}%2Bcpu.zip"    : "cpu/linux",
                "cpu/libtorch-macos-${VERSION}.zip"                               : "cpu/osx",
                "cpu/libtorch-win-shared-with-deps-${VERSION}.zip"                : "cpu/win",
                "cu92/libtorch-cxx11-abi-shared-with-deps-${VERSION}%2Bcu92.zip"  : "cu92/linux",
                "cu101/libtorch-cxx11-abi-shared-with-deps-${VERSION}%2Bcu101.zip": "cu101/linux",
                "cu102/libtorch-cxx11-abi-shared-with-deps-${VERSION}.zip"        : "cu102/linux",
                "cu92/libtorch-win-shared-with-deps-${VERSION}.zip"               : "cu92/win",
                "cu101/libtorch-win-shared-with-deps-${VERSION}.zip"              : "cu101/win",
                "cu102/libtorch-win-shared-with-deps-${VERSION}.zip"              : "cu102/win"
        ]
        if (isCentOS) {
            files = [
                    "cpu/libtorch-shared-with-deps-${VERSION}%2Bcpu.zip"    : "cpu/linux",
                    "cu92/libtorch-shared-with-deps-${VERSION}%2Bcu92.zip"  : "cu92/linux",
                    "cu101/libtorch-shared-with-deps-${VERSION}%2Bcu101.zip": "cu101/linux",
                    "cu102/libtorch-shared-with-deps-${VERSION}.zip"        : "cu102/linux",
            ]
        }
        files.each { entry ->
            project.logger.lifecycle("Downloading ${url}/${entry.key}")
            def outputDir = new File("${BINARY_ROOT}/${entry.value}")
            def file = new File("${outputDir}/libtorch.zip")
            file.getParentFile().mkdirs()
            new URL("${url}/${entry.key}").withInputStream { i -> file.withOutputStream { it << i } }
            copy {
                from zipTree(file)
                into outputDir
            }
            // CPU dependencies
            copy {
                from("${outputDir}/libtorch/lib/") {
                    include "libc10.*", "c10.dll", "libiomp5*.*", "libgomp*.*", "libtorch.*", "libtorch_cpu.*", "torch.dll", "torch_cpu.dll", "fbgemm.dll", "asmjit.dll"
                }
                into("${outputDir}/native/lib")
            }
            // GPU dependencies
            copy {
                from("${outputDir}/libtorch/lib/") {
                    include "libtorch_cuda.so", "torch_cuda.dll", "libc10_cuda.so", "c10_cuda.dll", "libcaffe2_nvrtc.so", "libnvrtc*.so.*", "libcudart*.*", "*nvToolsExt*.*", "cudnn*.dll", "caffe2_nvrtc.dll", "nvrtc64*.dll"
                }
                into("${outputDir}/native/lib")
            }
            if (isCentOS) {
                def libstd = new File("${outputDir}/native/lib/libstdc++.so.6")
                new URL("https://djl-ai.s3.amazonaws.com/publish/extra/libstdc%2B%2B.so.6").withInputStream {
                    i -> libstd.withOutputStream { it << i}
                }
            }
            delete(file)
            delete("${outputDir}/libtorch")
        }
        if (!isCentOS) {
            new File("${BINARY_ROOT}/auto").mkdirs()
        }
    }
}

def flavorNames = file(BINARY_ROOT).list() ?: []
flavorNames.each { flavor ->

    def platformNames = file("${BINARY_ROOT}/${flavor}").list() ?: []

    def artifactsNames = []

    platformNames.each { osName ->
        tasks.create(name: "${flavor}-${osName}Jar", type: Jar) {
            doFirst {
                def propFile = file("${BINARY_ROOT}/${flavor}/${osName}/native/lib/pytorch.properties")
                propFile.delete()
                def dsStore = file("${BINARY_ROOT}/${flavor}/${osName}/native/lib/.DS_Store")
                dsStore.delete()

                def versionName = String.format("${version}-%s", new Date().format('yyyyMMdd'))
                def dir = file("${BINARY_ROOT}/${flavor}/${osName}/native/lib")
                def sb = new StringBuilder()
                sb.append("version=${versionName}\nclassifier=${flavor}-${osName}-x86_64\nlibraries=")
                def first = true
                for (String name : dir.list().sort()) {
                    if (first) {
                        first = false
                    } else {
                        sb.append(',')
                    }
                    sb.append(name)
                }
                propFile.text = sb.toString()
                def metaInf = new File("${BINARY_ROOT}/${flavor}/${osName}/META-INF")
                metaInf.mkdirs()
                def licenseFile = new File(metaInf, "LICENSE")
                licenseFile.text = new URL("https://raw.githubusercontent.com/pytorch/pytorch/master/LICENSE").text

                def binaryLicenseFile = new File(metaInf, "NOTICE")
                binaryLicenseFile.text = new URL("https://raw.githubusercontent.com/pytorch/pytorch/master/NOTICE").text

                if (isCentOS) {
                    def libstd = new File(metaInf, "ATTRIBUTION")
                    libstd.text = new URL("https://djl-ai.s3.amazonaws.com/publish/extra/THIRD-PARTY-LICENSES_qHnMKgbdWa.txt").text
                }
            }
            from file("${BINARY_ROOT}/${flavor}/${osName}")
            from file("src/main/resources")
            archiveClassifier = "${osName}-x86_64"
        }
        artifactsNames.add(tasks["${flavor}-${osName}Jar"])
    }

    // Only publish if the project directory equals the current directory
    // This means that publishing from the main project does not publish the native jars
    // and the native jars have to be published separately
    if (project.getProjectDir().toString() == System.getProperty("user.dir")) {
        publishing.publications.create("${flavor}", MavenPublication) {
            artifactId "pytorch-native-${flavor}" + (isCentOS ? "-precxx11" : "")
            from components.java
            artifacts = artifactsNames
            artifact jar
            artifact javadocJar
            artifact sourcesJar
            pom {
                name = "DJL release for PyTorch native binaries"
                description = "Deep Java Library (DJL) provided PyTorch native library binary distribution"
                url = "http://www.djl.ai/pytorch/pytorch-native"
                packaging = "jar"

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0'
                    }
                }

                scm {
                    connection = "scm:git:git@github.com:awslabs/djl.git"
                    developerConnection = "scm:git:git@github.com:awslabs/djl.git"
                    url = "https://github.com/awslabs/djl"
                    tag = "HEAD"
                }

                developers {
                    developer {
                        name = "DJL.AI Team"
                        email = "djl-dev@amazon.com"
                        organization = "Amazon AI"
                        organizationUrl = "https://amazon.com"
                    }
                }
            }
        }
    }
}

